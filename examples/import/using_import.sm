// Using import examples in Summit
//
// The "using" keyword allows you to make public members of a module
// directly available in the current scope. There are multiple ways
// to do this, depending on how you import the module or submodule.

// Example 1: Using a submodule via alias
//
// Import the full module persistently and alias its submodule:
const std = @import("std") // Persistent import of the full std module
const io = std.io // Alias the io submodule

// Bring all members of the aliased submodule into the current scope
using io

func main_1():
    // Access all members of std.io members directly anywhere in the program
    println("Hello using aliased io!")
    print("Print works too!")
end

// Example 2: Using a submodule directly from an inline import
//
// You can use "using" directly on a submodule accessed via an inline import:
using @import("std").io

func main_2():
    println("Hello using inline import of std.io!")
    print("Direct access works here as well!")
end

// Example 3: Using a submodule via direct inline import of the submodule
//
// Alternatively, you can import the submodule directly and use it with "using":
using @import("std.io")

func main():
    println("Hello using direct inline submodule import!")
    print("All members of std.io are available directly!")

    main_1()
    main_2()
end
